/*
Flexbox is flexible container system that allows items (children) to be placed within it.
It is NOT a rigid grid system (like Bootstrap).
To make a grid (or more rigid layout), use CSS Grid
 */
.flexcontainer {
  border: dashed 2px red;
  height: 100vh;
  display: flex; /* Creates container with flex children */
  justify-content: space-between; /*Evenly distributes space between elements (not on end) */
  flex-wrap: wrap; /*Moves content to the next line if they "touch" */
  align-items: center; /* Uses the cross axis. Can use flex-start and flex-end as well. */
  align-content: space-between; /* Takes effect with smaller screen sizes */
  > div {
    background: #373142;
    color: #FFF;
    width: 100px;
    height: 100px;
    text-align: center;
    line-height: 100px;
    border: solid 2px red;
    &:nth-child(2) {
      height: 150px;
      order: -1;
      /* Make the 2nd item first.
      Items are given an order of "0" unless explicitly provided. */
      flex-grow: 1; /* Take up the remaining space (if any is available). Uses a ratio. */
      //flex: 0 1 auto; /* Flex grow, Flex shrink, Flex basis */
    }
    &:nth-child(3) {
      flex-grow: 3;
      align-self: flex-start; /* Pushes this single item to a different alignment */
    }
  }
}

/* CSS Grid

 */

.gridcontainer {
  display: grid; /* Defines the div as a grid. Needs more explicit direction than flex */
  //grid-template-columns: 100px auto 100px 100px; /* Can define each individually */
  //grid-template-rows: 100px 100px;
  //Could also use grid shorthand: Rows / Columns
  /*
  Shorthand syntax:
  grid: 100px (will automatically create new rows (b/c of grid-autoflow)) / 100px auto 100px 100px
  grid: 100px / repeat(4, 100px) auto (will create 5 total columns)
  grid: 100px / repeat(4, auto 50px) (will create 6 total columns)
  grid: 100px / repeat(2, 1fr 2fr) (fr is a fractional unit - this makes 4 total columns, but divided into 6 equal chunks)
   */
  grid: 100px 100px / repeat(3, 1fr);
  //grid-auto-flow: column; /*Controls what happens when extraneous cells are present. Defaults to auto */
  grid-gap: 10px 10px; /* Row and column gap. Could also be a single number if they are the same. */
  // Can also be defined individually:
  //grid-column-gap: 10px;
  //grid-row-gap: 10px;
  > div {
    background: #373142;
    color: #FFF;
    text-align: center;
    line-height: 100px;
    // Once the grid cells are defined, these can be removed
    //height: 100px;
    //width: 100px;
  }
}
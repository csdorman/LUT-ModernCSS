/*
CSS Variables

Variables can be defined to a selector or to root.
If defined to a selector, they are scoped to stay "within" that selector.
If defined within root, they can be defined globally.
 */

:root {
  --box-color: #373142;
  --text-color: #FFF;
  --box-border: solid 1px yellow;
  --section-border: dashed 5px red;
}

/*
Flexbox is flexible container system that allows items (children) to be placed within it.
It is NOT a rigid grid system (like Bootstrap).
To make a grid (or more rigid layout), use CSS Grid
 */
.flexcontainer {
  border: var(--section-border);
  height: 100vh;
  display: flex; /* Creates container with flex children */
  justify-content: space-between; /*Evenly distributes space between elements (not on end) */
  flex-wrap: wrap; /*Moves content to the next line if they "touch" */
  align-items: center; /* Uses the cross axis. Can use flex-start and flex-end as well. */
  align-content: space-between; /* Takes effect with smaller screen sizes */
  > div {
    background: var(--box-color);
    color: var(--text-color);
    width: 100px;
    height: 100px;
    text-align: center;
    line-height: 100px;
    border: var(--box-border);
    &:nth-child(2) {
      height: 150px;
      order: -1;
      /* Make the 2nd item first.
      Items are given an order of "0" unless explicitly provided. */
      flex-grow: 1; /* Take up the remaining space (if any is available). Uses a ratio. */
      //flex: 0 1 auto; /* Flex grow, Flex shrink, Flex basis */
    }
    &:nth-child(3) {
      flex-grow: 3;
      align-self: flex-start; /* Pushes this single item to a different alignment */
    }
  }
}

/* CSS Grid

 */

.gridcontainer {
  display: grid;
  grid: 100px 100px / repeat(2, 1fr 3fr);
  grid-gap: 10px;
  height: 100vh;
  border: var(--section-border);
  > div {
    border: var(--box-border);
    background: var(--box-color);
    color: var(--text-color);
    text-align: center;
    line-height: 100px;
    &:nth-child(1) { // target the first child
      grid-column: 1 / -1;
    }
    &:nth-child(2) {
      grid-area: 2 / 2 / 5 / 3; //start row / start column / row end / column end
    }
    &:nth-child(3) {
      grid-area: 4 / 4 / 5 / -1;
    }
  }
}